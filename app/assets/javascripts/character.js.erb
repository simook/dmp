<% url = Rails.application.routes.url_helpers %>
if (typeof window.dmp !== 'object') window.dmp = {};
dmp.character = function(){
  var viewModel = {
    character: ko.observableArray(),
    attributes: ko.observableArray(),
    skills: ko.observableArray(),
    skillGroups: ko.observableArray(),
    certificates: ko.observableArray(),
    certificateGroups: ko.observableArray(),
    kills: ko.observableArray(),
    lastUpdated: {
      skills: ko.observable(false),
      character: ko.observable(false),
      attributes: ko.observable(false),
      certificates: ko.observable(false),
      killlog: ko.observable(false)
    },
    loaded: {
      skills: ko.observable(false),
      character: ko.observable(false),
      attributes: ko.observable(false),
      certificates: ko.observable(false),
      killlog: ko.observable(false)
    }
  };

  viewModel.sortFunction = function(a, b) {
    return a.name().toLowerCase() > b.name().toLowerCase() ? 1 : -1;
  };

  viewModel.sortedSkillGroups = ko.dependentObservable(function() {
    return this.skillGroups.slice().sort(this.sortFunction);
  }, viewModel);

  var Kill = function(args){
    var self = this;
    this.id = ko.observable(args.kill_id);
    this.time = ko.observable(args.kill_time);
    this.moon = ko.observable(args.moon_id);
    this.solarSystem = ko.observable(args.solar_system_id);
    this.items = ko.observableArray();
    this.attackers = ko.observableArray();
    this.victims = ko.observableArray();
    this.totalDamage = ko.computed(function(){
      var total = 0;
      ko.utils.arrayForEach(self.victims(), function(victim){
        total += victim.damageTaken();
      });
      return total;
    });
    for (var i = 0; i < args.killlog_attackers.length; i++) {
      this.attackers.push(new Attacker(args.killlog_attackers[i]));
    };
    for (var i = 0; i < args.killlog_items.length; i++) {
      this.items.push(new Item(args.killlog_items[i]));
    };
    for (var i = 0; i < args.killlog_victims.length; i++) {
      this.victims.push(new Victim(args.killlog_victims[i]));
    };
  };

  var Victim = function(args){
    this.name = ko.observable(args.character_name);
    this.alliance = ko.observable(args.alliance_name);
    this.corporation = ko.observable(args.corporation_name);
    this.faction = ko.observable(args.faction_name);
    this.damageTaken = ko.observable(args.damage_taken);
    this.ship = ko.observable(args.ship_type_id);
  };

  var Item = function(args){
    this.id = ko.observable(args.type_id);
    this.destroyed = ko.observable(args.qty_destroyed);
    this.dropped = ko.observable(args.qty_dropped);
  };

  var Attacker = function(args){
    this.name = ko.observable(args.character_name);
    this.alliance = ko.observable(args.alliance_name);
    this.id = ko.observable(args.character_id);
    this.corporation = ko.observable(args.corporation_name);
    this.faction = ko.observable(args.faction_name);
    this.damageDone = ko.observable(args.damage_done);
    this.securityStatus = ko.observable(args.security_status);
    this.finalBlow = ko.observable(args.final_blow);
    this.ship = ko.observable(args.ship_type_id);
    this.weapon = ko.observable(args.weapon_type_id);
  };

  var SkillGroup = function(args){
    var self = this;
    this.name = ko.observable(args.groupName);
    this.id = ko.observable(args.groupID);
    this.trainedSkills = ko.observableArray();
    this.skillPoints = ko.computed(function(){
      var total = 0;
      for (var i = 0; i < self.trainedSkills().length; i++) {
        total += parseInt(self.trainedSkills()[i].skillpoints());
      };
      return formatNumber(total);
    }, this);
    this.skills = ko.computed(function(){
      viewModel.skills.subscribe(function(skill){
        for (var i = 0; i < skill.length; i++) {
          if(skill[i].groupId() === self.id() && skill[i].published() !== false){
            var matchTypeId = ko.utils.arrayFirst(self.trainedSkills(),function(existingSkill){
              return existingSkill.id() === skill[i].id();
            });
            if(!matchTypeId){
              self.trainedSkills.push(skill[i]);
            }
          };
        };
      });
    });
  };

  var Skill = function(args){
    this.name = ko.observable(args.typeName);
    this.id = ko.observable(args.typeID);
    this.rank = ko.observable(args.rank);
    this.groupId = ko.observable(args.groupID);
    this.level = ko.observable(false);
    this.skillpoints = ko.observable('0');
    this.published = ko.observable(false);
  };

  var Certificate = function(args){
    var evesqlCertificate = 'api/v1/certificate/';
    var self = this;
    this.name = ko.observable();
    this.description = ko.observable(false);
    this.id = ko.observable(args.certificate_id);
    this.grade = ko.observable(false);
    this.icon = ko.observable(false);
    this.categoryId = ko.observable(false);
    $.getJSON(evesqlUri+evesqlCertificate+'certificates/'+this.id()+'.js', {token:evesqlToken}, function(json){
      self.description(json.description);
      self.categoryId(json.categoryID);
      self.grade(json.grade);
      self.icon(json.iconID);
      $.getJSON(evesqlUri+evesqlCertificate+'classes/'+json.classID+'.js', {token:evesqlToken}, function(json){
        self.name(json.className);
      });
      $.getJSON(evesqlUri+evesqlCertificate+'categories/'+json.categoryID+'.js', {token:evesqlToken}, function(json){
        var matchCertificateId = ko.utils.arrayFirst(viewModel.certificateGroups(),function(group){
          return group.id() === json.categoryID;
        });
        if(!matchCertificateId){
          viewModel.certificateGroups.push(new CertificateGroup(json));
        };
      });
    });
  };

  var CertificateGroup = function(args){
    var self = this;
    this.name = ko.observable(args.categoryName);
    this.id = ko.observable(args.categoryID);
    this.certificates = ko.observableArray();
  };

  var killlog = function(){
    ko.applyBindings(viewModel,document.getElementById('character_killlogs'));
    $.getJSON('<%= url.killlog_character_index_path %>', function(json){
      if(json){
        for (var i = 0; i < json.length; i++) {
         viewModel.lastUpdated.killlog(json.updated_at);
         viewModel.kills.push(new Kill(json[i]));
        };
      };
    }).complete(function(){
      viewModel.loaded.killlog(true);
    });
  };

  var sheet = function(){
    ko.applyBindings(viewModel,document.getElementById('character_sheet'));
  };

  var init = function(){
    ko.applyBindings(viewModel,document.getElementById('secondary'));
    $.getJSON('<%= url.info_character_index_path %>', function(json){
      if(json){
        viewModel.lastUpdated.character(json.updated_at);
        viewModel.character.push(json);
      } else {
        alert('Your character information is missing. Either we haven\'t gotten your character info from EVE or we\'re experiencing technical issues.');
      };
    }).complete(function(){
      viewModel.loaded.character(true);
    });
  };

  var skills = function(){
    ko.applyBindings(viewModel,document.getElementById('character_skills'));
    ko.utils.arrayMap(skillTree, function(skill){
      var matchGroupId = ko.utils.arrayFirst(viewModel.skillGroups(),function(group){
        return group.id() === skill.groupID;
      });
      if(!matchGroupId){
        viewModel.skillGroups.push(new SkillGroup(skill));
      };
      for (var i = 0; i < skill.rowset.row.length; i++) {
        var item = skill.rowset.row[i];
        viewModel.skills.push(new Skill(item));
      };
    });
    $.getJSON('<%= url.skills_character_index_path %>', function(json){
      var self = this;
      if(json){
        for (var i = 0; i < json.length; i++) {
          viewModel.lastUpdated.skills(json[i].updated_at);
          var trainedSkill = json[i];
          var skill = ko.utils.arrayFirst(viewModel.skills(),function(skill){
            return parseInt(skill.id()) === trainedSkill.type_id;
          });
          if(skill){
            var skillIndex = viewModel.skills.indexOf(skill);
            skill.published(trainedSkill.published);
            skill.skillpoints(trainedSkill.skillpoints);
            skill.level(trainedSkill.level);
            viewModel.skills.splice(skillIndex, skill);
          }
        };
      };
    }).complete(function(){
      viewModel.loaded.skills(true);
    });
  };

  var attributes = function(){
    ko.applyBindings(viewModel,document.getElementById('character_attributes'));
    $.getJSON('<%= url.attributes_character_index_path %>', function(json){
      if(json){
        for (var i = 0; i < json.length; i++) {
          viewModel.lastUpdated.attributes(json[i].updated_at);
          viewModel.attributes.push(json[i]);
        };
      };
    }).complete(function(){
      viewModel.loaded.attributes(true);
    });
  };

  var certificates = function(){
    ko.applyBindings(viewModel,document.getElementById('character_certificates'));
    $.getJSON('<%= url.certificates_character_index_path %>', function(json){
      if(json){
        for (var i = 0; i < json.length; i++) {
          var certificate = json[i];
          viewModel.certificates.push(new Certificate(certificate));
          viewModel.lastUpdated.certificates(json[i].updated_at);
        };
      };
    }).complete(function(){
      viewModel.loaded.certificates(true);
    });
  };

  return {killlog: killlog,
          init: init,
          sheet: sheet,
          skills: skills,
          attributes: attributes,
          certificates: certificates,
          viewModel: viewModel};
}();