if (typeof window.dmp !== 'object') window.dmp = {};
dmp.character = function(){
  var data;

  var viewModel = {
    character: ko.observableArray(),
    loaded: ko.observable(false)
  };

  ko.bindingHandlers.icon = {
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var icon = allBindingsAccessor(valueAccessor()).icon;
      var format = icon.type === 'Character' ? '.jpg' : '.png';
      var url = 'http://image.eveonline.com/'+icon.type+'/'+icon.id+'_'+icon.size+format;
      var img = '<img src="'+url+'" />';
      ko.utils.setHtml(element, img);
    }
  };

  ko.bindingHandlers.name = {
   update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
     var id = allBindingsAccessor(valueAccessor()).name;
     $.getJSON('/eve/items/'+id, function(data){
       ko.utils.setHtml(element, data.typeName);
     });
    }
  }

  ko.bindingHandlers.total = {
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var values = allBindingsAccessor(valueAccessor()).total;
      var total = Math.round(parseInt(values.value1)+parseInt(values.value2));
      ko.utils.setHtml(element, total);
    }
  };

  ko.bindingHandlers.isk = {
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext){
      var value = allBindingsAccessor(valueAccessor()).isk;
      var isk = formatNumber(value)+' ISK'
      ko.utils.setHtml(element, isk);
    }
  };

  var formatNumber = function(nStr){
    nStr += '';
    x = nStr.split('.');
    x1 = x[0];
    x2 = x.length > 1 ? '.' + x[1] : '';
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
      x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1 + x2;
  };

  var killlog = function(){
    ko.applyBindings(viewModel);
    $.getJSON(window.location.pathname, function(json){
      for (var i = 0; i < json.kills.length; i++) {
       viewModel.character.push(json.kills[i]);
      };
    }).complete(function(){
      viewModel.loaded(true);
    });
  };

  var sheet = function(){
    ko.applyBindings(viewModel);
    $.getJSON(window.location.pathname, function(json){
      viewModel.character.push(json);
    }).complete(function(){
      viewModel.loaded(true);
    });
  };

  return {killlog: killlog,
          sheet: sheet,
          viewModel: viewModel};
}();